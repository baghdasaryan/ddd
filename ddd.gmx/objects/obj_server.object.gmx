<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-20</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create server and initialise map

//window_set_size(window_get_width(),window_get_height());

global.counter = 0;
image_blend = c_red;
global.haveserver = true;

global.GameStarted = false;
global.GameOver = false;

// List of random player colours....
ColourArray[0] = c_white;
ColourArray[1] = c_red;
ColourArray[2] = c_blue;
ColourArray[3] = c_yellow;
ColourArray[4] = c_green;
ColourArray[5] = c_purple;
ColourArray[6] = c_aqua;
ColourArray[7] = c_maroon;
ColourArray[8] = c_orange;
ColourArray[9] = c_teal;
ColourArray[10] = c_olive;
ColourArray[11] = c_ltgray;
ColourArray[12] = c_dkgray;
ColourArray[13] = c_navy;
ColourArray[14] = $ff8080;
ColourArray[15] = $80ff80;
colourindex = 0;

// Total number of players and baddies connected
global.PlayerTotal=0;
//global.BaddieCount = 0;
global.ChipCount=0;


// create our server. Server creation may fail if there is already a server running. If it does fail, delete eveything and kill this instance
broadcast_buffer = buffer_create(32, buffer_fixed, 1);
player_buffer = buffer_create(16384, buffer_fixed, 1);
Clients = ds_map_create();
socketlist = ds_list_create();

// Try and create the actual server
server = network_create_server(global.ServerType ,6510, 2);
if( server&lt;0 ){    
    // If theres already a server running, shut down and delete.
    global.haveserver = false;
    ds_map_destroy(Clients);
    ds_list_destroy(socketlist);
    buffer_delete(broadcast_buffer);
    buffer_delete(player_buffer);
    instance_destroy();
}


instance_create(0,0,obj_serverLife);
// Setup a timer so we can broadcast the server IP out to local clients looking...
alarm[0]=60; 


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.PlayerTotal == 2 and global.GameOver == false){
var xx = random_range(120,510);
var yy = random_range(900,990);

instance_create(xx,yy,obj_circle);

xx = random_range(720,1110);
yy = random_range(900,990);

instance_create(xx,yy,obj_circle);
    alarm[1] = 1000;
    
    global.ChipCount+=2;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Broadcast our location occasionally. Clients pick this up and can then display servers to the user. 

buffer_seek( broadcast_buffer, buffer_seek_start, 0 );
buffer_write( broadcast_buffer, buffer_string, global.ServerName );
network_send_broadcast( server, 6511, broadcast_buffer, buffer_tell(broadcast_buffer) );

// Broadcast once a second...
alarm[0]=60;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.PlayerTotal == 2 and global.GameStarted == false){
    alarm[1] = 1000;
    global.GameStarted = true;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send player data to ALL attached clients

// Once a frame, we send ALL attached clients, ALL game sprites (plaeyrs and baddies)
var count = ds_list_size(socketlist);
if( count&gt;0 )
{
    /// Send all sprites to all clients
    global.player_buffer = player_buffer;
    
    // Reset buffer to start - Networking ALWAYS reads from the START of the buffer
    buffer_seek(player_buffer, buffer_seek_start, 0);
    
    // Total number of sprites (players+baddies)
    //buffer_write(player_buffer, buffer_u32, global.PlayerTotal + global.BaddieCount );
    buffer_write(player_buffer, buffer_u32, global.ChipCount);

    // Dummy player x,y...will fill in later. This allows the client to follow themselves in a scrolling level.
//    buffer_write(global.player_buffer, buffer_s16, 0 );
//    buffer_write(global.player_buffer, buffer_s16, 0 );

     buffer_write(player_buffer, buffer_s16, global.GameOver);

    buffer_write(player_buffer, buffer_s16, obj_serverLife.var_blue_health);
    buffer_write(player_buffer, buffer_s16, obj_serverLife.var_red_health);


    // All attached players
   // with(oPlayer)
   with(obj_dynamicParent){
        buffer_write(global.player_buffer, buffer_s16, x );
        buffer_write(global.player_buffer, buffer_s16, y );
        buffer_write(global.player_buffer, buffer_s16, image_angle); 
        buffer_write(global.player_buffer, buffer_s16, sprite_index );
        buffer_write(global.player_buffer, buffer_s16, image_index );
        buffer_write(global.player_buffer, buffer_s32, image_blend );
        buffer_write(global.player_buffer, buffer_s16, var_timer );
        
   }
   
   /*
    with(oCircle)
    {
        buffer_write(global.player_buffer, buffer_s16, x );
        buffer_write(global.player_buffer, buffer_s16, y );
        
        buffer_write(global.player_buffer, buffer_s16, image_angle);
        
        buffer_write(global.player_buffer, buffer_s16, sprite_index );
        buffer_write(global.player_buffer, buffer_s16, image_index );
        buffer_write(global.player_buffer, buffer_s32, image_blend );
   //     buffer_write(global.player_buffer, buffer_string, PlayerName );
   //     buffer_write(global.player_buffer, buffer_string, "CIRCLE");
    }
    
    // Now send all baddies
    //with(oBaddie)
    
    with(oBox)
    {
        buffer_write(global.player_buffer, buffer_s16, x );
        buffer_write(global.player_buffer, buffer_s16, y );
        
        buffer_write(global.player_buffer, buffer_s16, image_angle);
        
        buffer_write(global.player_buffer, buffer_s16, sprite_index );
        buffer_write(global.player_buffer, buffer_s16, image_index );
        buffer_write(global.player_buffer, buffer_s32, image_blend );
    //    buffer_write(global.player_buffer, buffer_string, "");
     //   buffer_write(global.player_buffer, buffer_string, "BOX");
    }
    */
    var buffer_size = buffer_tell(player_buffer);
        
    // Now send all data... to all clients
    for(i=0;i&lt;count;i++)
    {   
        // get the socket
        var sock = ds_list_find_value(socketlist,i);

        // Write in client location, so it can do a scroll window "follow"
        buffer_seek(player_buffer, buffer_seek_start, 4);

        // Get the player's instance, so we can get it's X,Y
        //var inst = ds_map_find_value( Clients, sock);
        //buffer_write(global.player_buffer, buffer_s16, inst.x );
       // buffer_write(global.player_buffer, buffer_s16, inst.y );

        // Send data to client
        if (sock != global.client)
            network_send_packet( sock,player_buffer, buffer_size );
    }
}





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change Room View

if keyboard_check_pressed(ord('1')) {
    window_set_size(330,570);
    view_xview = 0;
    view_wview = 660;
    view_hview = 1140;
}

if keyboard_check_pressed(ord('2')) {
    window_set_size(330,570);
    view_xview = 600;
    view_wview = 660;
    view_hview = 1140;
}

if keyboard_check_pressed(ord('3')) {
    window_set_size(630,570);
    view_xview = 0;
    view_wview = 1260;
    view_hview = 1140;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Server network control
var eventid = ds_map_find_value(async_load, "id");

if( server == eventid ){
    // If the socket ID is the server one, then we have a new 
    /// client connecting, OR an old client disconnecting
    scr_connectDisconnectClient();
}else if( eventid==global.client){
    // Do nothing if this is for our "local" client
}else{
    // All other sockets are connected client sockets, and we have recieved commands from them.
    if(global.GameStarted == true and global.GameOver == false){
        scr_serverReceivedData();
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Display connected players, and number of baddies left.
draw_set_halign(fa_left);
draw_set_font(fnt_player);
draw_set_color(c_red);
draw_text(10,10,"players: "+string(global.PlayerTotal) );
var Game_Status = "Waiting";
if(global.GameStarted){
    if (global.GameOver){
        Game_Status = "Game Over";
    }
    else{
        Game_Status = "Game In Progress";
    }
}
draw_text(50,400,"Game Status "+Game_Status );

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
