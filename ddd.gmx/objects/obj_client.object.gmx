<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise the client

//window_set_size(window_get_width(),window_get_height());
//window_set_fullscreen(1);

clientx = 64;   // player start X and Y
clienty = 192;
PlayerName=global.ServerName;   // get the name that was selected (it's a server OR player name)

GameOver = false;

// Create a buffer for the network messages
buff = buffer_create(256, buffer_grow, 1);
// Create a TCP/IP socket
client = network_create_socket(global.ServerType);
// remember this socket ID so the server can ignore it (if we have a local server)
global.client = client;
// We're playing!!
global.NetworkState = NETWORK_PLAY;

// Create a list to hold ALL sprites sent from the server
allsprites = ds_list_create();
sprites = 0;

// Connect to our server
var err = network_connect(client, global.connectip, 6510);
if( err!=0 ){
    // if we can't connect, show and error and restart... could be more graceful :)
    show_message("Error - can not connect to server!!");
    game_restart();
}

// Client has connected to the server, so send our "player name"
//SendName( PlayerName );
alarm[0]=120;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change resolution

window_set_size(330,570);
if instance_number(obj_server) == 0 {
    view_xview = 600;
    view_wview = 660;
    view_hview = 1140;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send keep alive "ping" to server
scr_sendKeepAlive();
alarm[0]=120;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tell server LEFT MOUSE RELASED
scr_sendKey(mb_left,0, mouse_x, mouse_y);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tell server LEFT MOUSE was pressed
scr_sendKey(mb_left,1, mouse_x, mouse_y);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Networking code
var eventid = ds_map_find_value(async_load, "id");

// Our socket?
if( client == eventid )
{
    switch(global.NetworkState)
    {
        case NETWORK_PLAY :
        {
            // Read all data....
            var buff = ds_map_find_value(async_load, "buffer");
            // Get number of sprites sent
            sprites = buffer_read(buff, buffer_u32 ); 
            
            GameOver = buffer_read(buff,buffer_s16);
            
            obj_drawHealth.var_blueLife = buffer_read(buff,buffer_s16);
            obj_drawHealth.var_redLife = buffer_read(buff,buffer_s16);
            
            // Read out OUR location (allow scrolling maps)
//            clientx = buffer_read(buff,buffer_s16);     //x
//            clienty = buffer_read(buff,buffer_s16);     //y
        
            // Now clear the render list, and start filling it up with NEW data!
            ds_list_clear(allsprites);
            for(var i = 0; i &lt; sprites; i++){
                ds_list_add(allsprites, buffer_read(buff,buffer_s16) );     //x
                ds_list_add(allsprites, buffer_read(buff,buffer_s16) );     //y
                ds_list_add(allsprites, buffer_read(buff,buffer_s16) );     //rotation
                ds_list_add(allsprites, buffer_read(buff,buffer_s16) );     //sprite_index
                ds_list_add(allsprites, buffer_read(buff,buffer_s16) );     //image_index
                ds_list_add(allsprites, buffer_read(buff,buffer_s32) );     //image_blend        
                ds_list_add(allsprites, buffer_read(buff,buffer_s16) );     // timer
            }  
        }    
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw all sprites in level

// set the X and Y of the client so the room "follows" our player
x = clientx;
y = clienty;

// Now loop through all active sprites and draw them
var index = 0;

for(i=0;i&lt;sprites;i++){
    var xx,yy,sp,spindex, col, rot, time;
    
    xx = ds_list_find_value(allsprites,index++);
    yy = ds_list_find_value(allsprites,index++);
    
    rot = ds_list_find_value(allsprites,index++);
    
    sp = ds_list_find_value(allsprites,index++);
    spindex = ds_list_find_value(allsprites,index++);
    col = ds_list_find_value(allsprites,index++);
    time = ds_list_find_value(allsprites,index++);


    draw_sprite_ext(sp,spindex,xx,yy,1,1,rot,col,1.0);
    draw_set_halign(fa_center);
    draw_set_color(c_red);
    draw_set_font(fnt_timer);
    draw_text(xx,yy-20,string(round(time/60)));

}

//if (instance_number(oServer) == 0){
    draw_set_halign(fa_left);
    draw_set_font(fnt_status);
    var Game_Status = "Nothing";
    if (GameOver == true){
        Game_Status = "Game Over";
    }
    else{
        Game_Status = "Game In Progress";
    }
    draw_text(700,800,"Game Status "+Game_Status );
//}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
